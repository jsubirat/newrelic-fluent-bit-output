name: New Relic Fluent Bit Output Plugin - Merge to master

on: [pull_request]
#on:
#  push:
#    branches:
#      - master

jobs:
  cd:
    name: Continuous Delivery pipeline
    runs-on: ubuntu-18.04

    steps:
      - name: Set up Go 1.14
        uses: actions/setup-go@v2
        with:
          go-version: ^1.14
        id: go

      - name: Checkout code
        uses: actions/checkout@v2

      # - name: Run unit tests
      #   run: go test ./...

      - name: Determine new plugin version
        run: |
          VERSION=$(cat version.go | grep VERSION | awk '{gsub(/"/, "", $4); print $4}')
          echo "Determined version: $VERSION"
          # After the following command, the VERSION variable is available via the "env" command
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Install mingw, arm32 and arm64 compilers
        run: |
          sudo apt install mingw-w64 g++-arm-linux-gnueabihf g++-aarch64-linux-gnu gcc-arm-linux-gnueabihf gcc-aarch64-linux-gnu

      - name: Build project (Linux amd64)
        run: env make linux-amd64

      - name: Build project (Windows 386)
        run: env make windows-386

      - name: Build project (Windows amd64)
        run: env make windows-amd64

      - name: Build project (Linux arm)
        run: env make linux-arm

      - name: Build project (Linux arm64)
        run: env make linux-arm64

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.VERSION }}
          release_name: newrelic-fluent-bit-output-${{ env.VERSION }}
          draft: false
          prerelease: false

      - name: Include linux-amd64 artifact in release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out_newrelic-linux-amd64-${{ env.VERSION }}.so
          asset_name: out_newrelic-linux-amd64-${{ env.VERSION }}.so
          asset_content_type: application/octet-stream

      - name: Include windows-amd64 artifact in release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out_newrelic-windows-amd64-${{ env.VERSION }}.dll
          asset_name: out_newrelic-windows-amd64-${{ env.VERSION }}.dll
          asset_content_type: application/octet-stream

      - name: Include windows-386 artifact in release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out_newrelic-windows-386-${{ env.VERSION }}.dll
          asset_name: out_newrelic-windows-386-${{ env.VERSION }}.dll
          asset_content_type: application/octet-stream

      - name: Include linux-arm64 artifact in release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out_newrelic-linux-arm64-${{ env.VERSION }}.so
          asset_name: out_newrelic-linux-arm64-${{ env.VERSION }}.so
          asset_content_type: application/octet-stream

      - name: Include linux-arm artifact in release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./out_newrelic-linux-arm-${{ env.VERSION }}.so
          asset_name: out_newrelic-linux-arm-${{ env.VERSION }}.so
          asset_content_type: application/octet-stream